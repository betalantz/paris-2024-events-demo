/**
 * This code was generated by v0 by Vercel.
 * @see https://v0.dev/t/biVRGJXae08
 * Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
 */

/** Add fonts into your Next.js project:


To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
// "use client"

import { Inter } from "next/font/google";

Inter({
  subsets: ["latin"],
  display: "swap",
});
import { useState } from "react";
import { Button } from "@/components/ui/button";
import {
  DropdownMenu,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuItem,
} from "@/components/ui/dropdown-menu";
import { Avatar, AvatarImage, AvatarFallback } from "@/components/ui/avatar";
import Link from "next/link";
import {
  Card,
  CardHeader,
  CardTitle,
  CardDescription,
  CardContent,
  CardFooter,
} from "@/components/ui/card";

export function EventList() {
  const [watchlist, setWatchlist] = useState([]);
  const [events, setEvents] = useState([
    {
      id: 1,
      name: "Men's 100m Final",
      sport: "Athletics",
      date: "2024-08-03",
      time: "20:00",
      location: "Stade de France",
      athletes: [
        { name: "Usain Bolt", country: "Jamaica" },
        { name: "Christian Coleman", country: "USA" },
        { name: "Trayvon Bromell", country: "USA" },
      ],
      venue: {
        name: "Stade de France",
        address: "93200 Saint-Denis, France",
        capacity: 80000,
      },
    },
    {
      id: 2,
      name: "Women's Gymnastics All-Around Final",
      sport: "Gymnastics",
      date: "2024-08-05",
      time: "15:00",
      location: "Bercy Arena",
      athletes: [
        { name: "Simone Biles", country: "USA" },
        { name: "Sunisa Lee", country: "USA" },
        { name: "Angelina Melnikova", country: "ROC" },
      ],
      venue: {
        name: "Bercy Arena",
        address: "8 Boulevard de Bercy, 75012 Paris, France",
        capacity: 20000,
      },
    },
    {
      id: 3,
      name: "Men's Basketball Gold Medal Game",
      sport: "Basketball",
      date: "2024-08-10",
      time: "18:00",
      location: "AccorHotels Arena",
      athletes: [
        { name: "LeBron James", country: "USA" },
        { name: "Luka Dončić", country: "Slovenia" },
        { name: "Giannis Antetokounmpo", country: "Greece" },
      ],
      venue: {
        name: "AccorHotels Arena",
        address: "8 Boulevard de Bercy, 75012 Paris, France",
        capacity: 20000,
      },
    },
  ]);
  const [user, setUser] = useState(null);
  const handleLogin = () => {
    setUser({ name: "John Doe", email: "john@example.com" });
  };
  const handleLogout = () => {
    setUser(null);
  };
  const handleAddToWatchlist = (event) => {
    setWatchlist([...watchlist, event]);
  };
  const handleRemoveFromWatchlist = (eventId) => {
    setWatchlist(watchlist.filter((event) => event.id !== eventId));
  };
  const handleShareEvent = (event) => {
    console.log(`Sharing event: ${event.name}`);
  };
  const handleShareWatchlist = () => {
    console.log("Sharing watchlist");
  };
  return (
    <div className="max-w-6xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
      <header className="mb-8 flex items-center justify-between">
        <div>
          <h1 className="text-4xl font-bold">2024 Paris Olympics</h1>
          <p className="text-muted-foreground">
            Explore the upcoming events and create your personalized watchlist.
          </p>
        </div>
        <div className="flex items-center gap-4">
          {user ? (
            <Button
              variant="outline"
              onClick={handleLogout}
            >
              Logout
            </Button>
          ) : (
            <Button
              variant="outline"
              onClick={handleLogin}
            >
              Login
            </Button>
          )}
          <DropdownMenu>
            <DropdownMenuTrigger asChild>
              <Button
                variant="ghost"
                size="icon"
                className="rounded-full"
              >
                {user ? (
                  <Avatar className="h-8 w-8">
                    <AvatarImage src="/placeholder-user.jpg" />
                    <AvatarFallback>
                      {user.name.charAt(0).toUpperCase()}
                    </AvatarFallback>
                  </Avatar>
                ) : (
                  <UserIcon className="h-6 w-6" />
                )}
                <span className="sr-only">Toggle user menu</span>
              </Button>
            </DropdownMenuTrigger>
            {user && (
              <DropdownMenuContent align="end">
                <DropdownMenuLabel>
                  Signed in as {user.name} ({user.email})
                </DropdownMenuLabel>
                <DropdownMenuSeparator />
                <DropdownMenuItem>
                  <Link
                    href="#"
                    className="flex items-center gap-2"
                    prefetch={false}
                  >
                    <UserIcon className="h-4 w-4" />
                    <span>Profile</span>
                  </Link>
                </DropdownMenuItem>
                <DropdownMenuItem>
                  <Link
                    href="#"
                    className="flex items-center gap-2"
                    prefetch={false}
                  >
                    <SettingsIcon className="h-4 w-4" />
                    <span>Settings</span>
                  </Link>
                </DropdownMenuItem>
                <DropdownMenuSeparator />
                <DropdownMenuItem>
                  <Button
                    variant="ghost"
                    onClick={handleLogout}
                    className="w-full"
                  >
                    <LogOutIcon className="h-4 w-4" />
                    <span>Logout</span>
                  </Button>
                </DropdownMenuItem>
              </DropdownMenuContent>
            )}
          </DropdownMenu>
        </div>
      </header>
      <section className="mb-8">
        <h2 className="text-2xl font-bold">Upcoming Events</h2>
        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6">
          {events.map((event) => (
            <Card key={event.id}>
              <CardHeader>
                <CardTitle>{event.name}</CardTitle>
                <CardDescription>
                  {event.sport} - {event.date} at {event.time}
                </CardDescription>
              </CardHeader>
              <CardContent>
                <div className="mb-4">
                  <h3 className="text-lg font-semibold">Venue</h3>
                  <p>{event.venue.name}</p>
                  <p className="text-muted-foreground">
                    {event.venue.address} - Capacity: {event.venue.capacity}
                  </p>
                </div>
                <div className="mb-4">
                  <h3 className="text-lg font-semibold">Athletes</h3>
                  <ul className="space-y-2">
                    {event.athletes.map((athlete, index) => (
                      <li key={index}>
                        {athlete.name} ({athlete.country})
                      </li>
                    ))}
                  </ul>
                </div>
              </CardContent>
              <CardFooter className="flex items-center justify-between">
                {watchlist.some((e) => e.id === event.id) ? (
                  <Button
                    variant="outline"
                    onClick={() => handleRemoveFromWatchlist(event.id)}
                  >
                    Remove from Watchlist
                  </Button>
                ) : (
                  <Button
                    variant="outline"
                    onClick={() => handleAddToWatchlist(event)}
                  >
                    Add to Watchlist
                  </Button>
                )}
                <Button
                  variant="ghost"
                  onClick={() => handleShareEvent(event)}
                >
                  <ShareIcon className="w-5 h-5" />
                  <span className="sr-only">Share event</span>
                </Button>
              </CardFooter>
            </Card>
          ))}
        </div>
      </section>
      <section className="mb-8">
        <div className="flex items-center justify-between mb-4">
          <h2 className="text-2xl font-bold">My Watchlist</h2>
          {watchlist.length > 0 && (
            <Button
              variant="ghost"
              onClick={handleShareWatchlist}
            >
              <ShareIcon className="w-5 h-5" />
              <span className="sr-only">Share watchlist</span>
            </Button>
          )}
        </div>
        {watchlist.length > 0 ? (
          <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6">
            {watchlist.map((event) => (
              <Card key={event.id}>
                <CardHeader>
                  <CardTitle>{event.name}</CardTitle>
                  <CardDescription>
                    {event.sport} - {event.date} at {event.time}
                  </CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="mb-4">
                    <h3 className="text-lg font-semibold">Venue</h3>
                    <p>{event.venue.name}</p>
                    <p className="text-muted-foreground">
                      {event.venue.address} - Capacity: {event.venue.capacity}
                    </p>
                  </div>
                  <div className="mb-4">
                    <h3 className="text-lg font-semibold">Athletes</h3>
                    <ul className="space-y-2">
                      {event.athletes.map((athlete, index) => (
                        <li key={index}>
                          {athlete.name} ({athlete.country})
                        </li>
                      ))}
                    </ul>
                  </div>
                </CardContent>
                <CardFooter className="flex items-center justify-between">
                  <Button
                    variant="outline"
                    onClick={() => handleRemoveFromWatchlist(event.id)}
                  >
                    Remove from Watchlist
                  </Button>
                  <Button
                    variant="ghost"
                    onClick={() => handleShareEvent(event)}
                  >
                    <ShareIcon className="w-5 h-5" />
                    <span className="sr-only">Share event</span>
                  </Button>
                </CardFooter>
              </Card>
            ))}
          </div>
        ) : (
          <div className="text-center text-muted-foreground">
            Your watchlist is empty. Add events to keep track of your favorites.
          </div>
        )}
      </section>
      <section>
        <h2 className="text-2xl font-bold mb-4">Leaderboards</h2>
        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6">
          <Card>
            <CardHeader>
              <CardTitle>Athletics</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="mb-4">
                <h3 className="text-lg font-semibold">Men's 100m</h3>
                <ol className="space-y-2">
                  <li>
                    <div className="flex items-center justify-between">
                      <span>1. Usain Bolt</span>
                      <span className="text-primary">9.58s</span>
                    </div>
                  </li>
                  <li>
                    <div className="flex items-center justify-between">
                      <span>2. Christian Coleman</span>
                      <span className="text-primary">9.76s</span>
                    </div>
                  </li>
                  <li>
                    <div className="flex items-center justify-between">
                      <span>3. Trayvon Bromell</span>
                      <span className="text-primary">9.80s</span>
                    </div>
                  </li>
                </ol>
              </div>
              <div>
                <h3 className="text-lg font-semibold">Women's 100m</h3>
                <ol className="space-y-2">
                  <li>
                    <div className="flex items-center justify-between">
                      <span>1. Shelly-Ann Fraser-Pryce</span>
                      <span className="text-primary">10.63s</span>
                    </div>
                  </li>
                  <li>
                    <div className="flex items-center justify-between">
                      <span>2. Elaine Thompson-Herah</span>
                      <span className="text-primary">10.71s</span>
                    </div>
                  </li>
                  <li>
                    <div className="flex items-center justify-between">
                      <span>3. Sha'Carri Richardson</span>
                      <span className="text-primary">10.72s</span>
                    </div>
                  </li>
                </ol>
              </div>
            </CardContent>
          </Card>
          <Card>
            <CardHeader>
              <CardTitle>Gymnastics</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="mb-4">
                <h3 className="text-lg font-semibold">Women's All-Around</h3>
                <ol className="space-y-2">
                  <li>
                    <div className="flex items-center justify-between">
                      <span>1. Simone Biles</span>
                      <span className="text-primary">59.666</span>
                    </div>
                  </li>
                  <li>
                    <div className="flex items-center justify-between">
                      <span>2. Sunisa Lee</span>
                      <span className="text-primary">57.433</span>
                    </div>
                  </li>
                  <li>
                    <div className="flex items-center justify-between">
                      <span>3. Angelina Melnikova</span>
                      <span className="text-primary">56.899</span>
                    </div>
                  </li>
                </ol>
              </div>
            </CardContent>
          </Card>
          <Card>
            <CardHeader>
              <CardTitle>Basketball</CardTitle>
            </CardHeader>
            <CardContent>
              <div>
                <h3 className="text-lg font-semibold">Men's Tournament</h3>
                <ol className="space-y-2">
                  <li>
                    <div className="flex items-center justify-between">
                      <span>1. United States</span>
                      <span className="text-primary">Gold Medal</span>
                    </div>
                  </li>
                  <li>
                    <div className="flex items-center justify-between">
                      <span>2. Slovenia</span>
                      <span className="text-primary">Silver Medal</span>
                    </div>
                  </li>
                  <li>
                    <div className="flex items-center justify-between">
                      <span>3. Greece</span>
                      <span className="text-primary">Bronze Medal</span>
                    </div>
                  </li>
                </ol>
              </div>
            </CardContent>
          </Card>
        </div>
      </section>
    </div>
  );
}

function LogOutIcon(props) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M9 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h4" />
      <polyline points="16 17 21 12 16 7" />
      <line
        x1="21"
        x2="9"
        y1="12"
        y2="12"
      />
    </svg>
  );
}

function SettingsIcon(props) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M12.22 2h-.44a2 2 0 0 0-2 2v.18a2 2 0 0 1-1 1.73l-.43.25a2 2 0 0 1-2 0l-.15-.08a2 2 0 0 0-2.73.73l-.22.38a2 2 0 0 0 .73 2.73l.15.1a2 2 0 0 1 1 1.72v.51a2 2 0 0 1-1 1.74l-.15.09a2 2 0 0 0-.73 2.73l.22.38a2 2 0 0 0 2.73.73l.15-.08a2 2 0 0 1 2 0l.43.25a2 2 0 0 1 1 1.73V20a2 2 0 0 0 2 2h.44a2 2 0 0 0 2-2v-.18a2 2 0 0 1 1-1.73l.43-.25a2 2 0 0 1 2 0l.15.08a2 2 0 0 0 2.73-.73l.22-.39a2 2 0 0 0-.73-2.73l-.15-.08a2 2 0 0 1-1-1.74v-.5a2 2 0 0 1 1-1.74l.15-.09a2 2 0 0 0 .73-2.73l-.22-.38a2 2 0 0 0-2.73-.73l-.15.08a2 2 0 0 1-2 0l-.43-.25a2 2 0 0 1-1-1.73V4a2 2 0 0 0-2-2z" />
      <circle
        cx="12"
        cy="12"
        r="3"
      />
    </svg>
  );
}

function ShareIcon(props) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M4 12v8a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2v-8" />
      <polyline points="16 6 12 2 8 6" />
      <line
        x1="12"
        x2="12"
        y1="2"
        y2="15"
      />
    </svg>
  );
}

function UserIcon(props) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M19 21v-2a4 4 0 0 0-4-4H9a4 4 0 0 0-4 4v2" />
      <circle
        cx="12"
        cy="7"
        r="4"
      />
    </svg>
  );
}

function XIcon(props) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M18 6 6 18" />
      <path d="m6 6 12 12" />
    </svg>
  );
}
